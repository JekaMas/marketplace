// Code generated by MockGen. DO NOT EDIT.
// Source: accounts/keys.go

// Package accounts is a generated GoMock package.
package accounts

import (
	ecdsa "crypto/ecdsa"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockPassPhraser is a mock of PassPhraser interface
type MockPassPhraser struct {
	ctrl     *gomock.Controller
	recorder *MockPassPhraserMockRecorder
}

// MockPassPhraserMockRecorder is the mock recorder for MockPassPhraser
type MockPassPhraserMockRecorder struct {
	mock *MockPassPhraser
}

// NewMockPassPhraser creates a new mock instance
func NewMockPassPhraser(ctrl *gomock.Controller) *MockPassPhraser {
	mock := &MockPassPhraser{ctrl: ctrl}
	mock.recorder = &MockPassPhraserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPassPhraser) EXPECT() *MockPassPhraserMockRecorder {
	return m.recorder
}

// GetPassPhrase mocks base method
func (m *MockPassPhraser) GetPassPhrase() (string, error) {
	ret := m.ctrl.Call(m, "GetPassPhrase")
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetPassPhrase indicates an expected call of GetPassPhrase
func (mr *MockPassPhraserMockRecorder) GetPassPhrase() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassPhrase", reflect.TypeOf((*MockPassPhraser)(nil).GetPassPhrase))
}

// MockKeyOpener is a mock of KeyOpener interface
type MockKeyOpener struct {
	ctrl     *gomock.Controller
	recorder *MockKeyOpenerMockRecorder
}

// MockKeyOpenerMockRecorder is the mock recorder for MockKeyOpener
type MockKeyOpenerMockRecorder struct {
	mock *MockKeyOpener
}

// NewMockKeyOpener creates a new mock instance
func NewMockKeyOpener(ctrl *gomock.Controller) *MockKeyOpener {
	mock := &MockKeyOpener{ctrl: ctrl}
	mock.recorder = &MockKeyOpenerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyOpener) EXPECT() *MockKeyOpenerMockRecorder {
	return m.recorder
}

// GetPassPhraser mocks base method
func (m *MockKeyOpener) GetPassPhraser() PassPhraser {
	ret := m.ctrl.Call(m, "GetPassPhraser")
	ret0, _ := ret[0].(PassPhraser)
	return ret0
}

// GetPassPhraser indicates an expected call of GetPassPhraser
func (mr *MockKeyOpenerMockRecorder) GetPassPhraser() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetPassPhraser", reflect.TypeOf((*MockKeyOpener)(nil).GetPassPhraser))
}

// OpenKeystore mocks base method
func (m *MockKeyOpener) OpenKeystore() (bool, error) {
	ret := m.ctrl.Call(m, "OpenKeystore")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// OpenKeystore indicates an expected call of OpenKeystore
func (mr *MockKeyOpenerMockRecorder) OpenKeystore() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "OpenKeystore", reflect.TypeOf((*MockKeyOpener)(nil).OpenKeystore))
}

// GetKey mocks base method
func (m *MockKeyOpener) GetKey() (*ecdsa.PrivateKey, error) {
	ret := m.ctrl.Call(m, "GetKey")
	ret0, _ := ret[0].(*ecdsa.PrivateKey)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetKey indicates an expected call of GetKey
func (mr *MockKeyOpenerMockRecorder) GetKey() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetKey", reflect.TypeOf((*MockKeyOpener)(nil).GetKey))
}

// MockKeyStorager is a mock of KeyStorager interface
type MockKeyStorager struct {
	ctrl     *gomock.Controller
	recorder *MockKeyStoragerMockRecorder
}

// MockKeyStoragerMockRecorder is the mock recorder for MockKeyStorager
type MockKeyStoragerMockRecorder struct {
	mock *MockKeyStorager
}

// NewMockKeyStorager creates a new mock instance
func NewMockKeyStorager(ctrl *gomock.Controller) *MockKeyStorager {
	mock := &MockKeyStorager{ctrl: ctrl}
	mock.recorder = &MockKeyStoragerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockKeyStorager) EXPECT() *MockKeyStoragerMockRecorder {
	return m.recorder
}

// KeyStore mocks base method
func (m *MockKeyStorager) KeyStore() string {
	ret := m.ctrl.Call(m, "KeyStore")
	ret0, _ := ret[0].(string)
	return ret0
}

// KeyStore indicates an expected call of KeyStore
func (mr *MockKeyStoragerMockRecorder) KeyStore() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "KeyStore", reflect.TypeOf((*MockKeyStorager)(nil).KeyStore))
}

// PassPhrase mocks base method
func (m *MockKeyStorager) PassPhrase() string {
	ret := m.ctrl.Call(m, "PassPhrase")
	ret0, _ := ret[0].(string)
	return ret0
}

// PassPhrase indicates an expected call of PassPhrase
func (mr *MockKeyStoragerMockRecorder) PassPhrase() *gomock.Call {
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "PassPhrase", reflect.TypeOf((*MockKeyStorager)(nil).PassPhrase))
}

// MockPrinter is a mock of Printer interface
type MockPrinter struct {
	ctrl     *gomock.Controller
	recorder *MockPrinterMockRecorder
}

// MockPrinterMockRecorder is the mock recorder for MockPrinter
type MockPrinterMockRecorder struct {
	mock *MockPrinter
}

// NewMockPrinter creates a new mock instance
func NewMockPrinter(ctrl *gomock.Controller) *MockPrinter {
	mock := &MockPrinter{ctrl: ctrl}
	mock.recorder = &MockPrinterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPrinter) EXPECT() *MockPrinterMockRecorder {
	return m.recorder
}

// Printf mocks base method
func (m *MockPrinter) Printf(format string, i ...interface{}) {
	varargs := []interface{}{format}
	for _, a := range i {
		varargs = append(varargs, a)
	}
	m.ctrl.Call(m, "Printf", varargs...)
}

// Printf indicates an expected call of Printf
func (mr *MockPrinterMockRecorder) Printf(format interface{}, i ...interface{}) *gomock.Call {
	varargs := append([]interface{}{format}, i...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Printf", reflect.TypeOf((*MockPrinter)(nil).Printf), varargs...)
}
